/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ili9341.h"
#include "fatfs_sd.h"
#include "string.h"
#include "stdio.h"
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
SPI_HandleTypeDef hspi1;
FATFS fs;
FATFS *pfs;
FIL fil;
FRESULT fres;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;
char buffer[100];
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
//Arreglos Menu
uint8_t Menu[]="Elija una de las opciones\n\r 1. Leer temperatura \n\r 2.Guardar dato en la SD";
int TX_buffer  = 1;
char RX_buffer[4];
float temp_value;
uint32_t tiempoActual;
char temp_fr[20];
char br1 [100];


//Variables Interrupcion
int estado1;
int estado2;
uint8_t valores[2];
char SD_feedback [] = "Dato guardado: \n\r";
uint8_t conex2[1]="2";
int real;
int real2;
char resultado[10];

extern uint8_t nieve[];
extern uint8_t termo[];
extern uint8_t fuego[];

float valor;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_UART5_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void guardar_sd(void);
void floatToString(float value, char *buffer, int precision);
void RequestSensorData(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_UART5_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */

  //Despliegue menu




  //Poner pantalla

  	LCD_Init();
  	LCD_Clear(0x00);
  	FillRect(0, 0, 319, 239, 0x07FF);










  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, Menu, sizeof(Menu), HAL_MAX_DELAY);
	  if(estado1==1){     //INTERRUPCION PARA LEER SENSOR
		  HAL_Delay(100);
		  estado1 = 0;
	  	  //WaitForButtonPress(BTN_read_GPIO_Port, BTN_read_Pin);  //ESTO VA AQUI???
	  	  RequestSensorData();                                   //Manda a leer el sensor al ESP
	  	  temp_value = atof((char*)RX_buffer);
	  	  floatToString(temp_value, temp_fr, 2);

	  	  if(temp_value < 20){
	  		  char *frio = "Está muy frío. Valor < 20 C";
    	  	  HAL_UART_Transmit(&huart2, (uint8_t*)frio, strlen(frio), 100);
    	  	  //Mostrar nieve en la pantalla
    	  	  LCD_Clear(0x00);
    	  	  FillRect(0, 120, 0, 120, 0x07FF);
    	  	  FillRect(100, 200, 50, 150, 0x001F);
    	  	  FillRect(75, 150, 200, 300, 0x07E0);
    	  	  FillRect(200, 240, 280, 320, 0x05E0);
    	  	  //LCD_Bitmap(1, 1, 120, 120, nieve);
    	  	  LCD_Print("Temperatura: ", 100, 100, 2, 0x0000, 0xFFFF);
    	  	  LCD_Print(RX_buffer, 150, 150, 2, 0x0000, 0xFFFF);
    	  	  HAL_Delay(5000);
	  	  }

	  	  if(temp_value >=20 && temp_value < 40){
	  		char *tibio = "Está muy tibio. Valor entre 20 C y 40 C";
	  		HAL_UART_Transmit(&huart2, (uint8_t*)tibio, strlen(tibio), 100);
	  		//Mostrar termometro en pantalla
  	  	    LCD_Clear(0x00);
	  		FillRect(0, 240, 0, 320, 0xFFE0);
	  		FillRect(0, 120, 0, 120, 0x07FF);
	  		FillRect(100, 200, 50, 150, 0xBC40);
	  		FillRect(75, 150, 200, 300, 0xB6DF);
	  		FillRect(200, 240, 280, 320, 0x9A20);
  	  	    //LCD_Bitmap(1, 1, 120, 129, termo);
  	  	  	LCD_Print("Temperatura: ", 100, 100, 2, 0x0000, 0xFFFF);
  	  	  	LCD_Print(RX_buffer, 150, 150, 2, 0x0000, 0xFFFF);
  	  	  	HAL_Delay(5000);
	  	  }

	  	  if(temp_value >=40){
	  		char *caliente = "Está muy caliente. Valor > 40 C";
	  		HAL_UART_Transmit(&huart2, (uint8_t*)caliente, strlen(caliente), 100);
	  		//Mostrar fuego en pantalla
	  		LCD_Clear(0x00);
	  		FillRect(0, 240, 0, 320, 0xFC00);
	  		FillRect(0, 120, 0, 120, 0xF800);
	  		FillRect(100, 200, 50, 150, 0xFCA0);
	  		FillRect(75, 150, 200, 300, 0xA040);
	  		FillRect(200, 240, 280, 320, 0xFA60);
  	  	    //LCD_Bitmap(1, 1, 120, 120, fuego);
  	  	    LCD_Print("Temperatura: ", 100, 100, 2, 0x0000, 0xFFFF);
  	  	    LCD_Print(RX_buffer, 150, 150, 2, 0x0000, 0xFFFF);
	  		HAL_Delay(5000);
	  	  }
	  }

  if(estado2==1){       //INTERRUPCION PARA GUARDAR DATOS
	  HAL_Delay(100);
	  estado2=0;
	  guardar_sd();
	  HAL_UART_Transmit(&huart5,conex2, 1, 100);

  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : BTN_read_Pin BTN_save_Pin */
  GPIO_InitStruct.Pin = BTN_read_Pin|BTN_save_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
//Interrupcion de botones
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();

    if (current_time - last_interrupt_time > 50) { // 50 ms de debounce
        if (GPIO_Pin == BTN_read_Pin) {
            // Si el botón BTN_Read es presionado, se indica que se desea medir
            estado1 = 1;
        } else if (GPIO_Pin == BTN_save_Pin) {
            // Si el botón BTN_Save es presionado, se indica que se quiere guardar
            estado2 = 1;
        }
    }
    //last_interrupt_time = current_time;
}

void WaitForButtonPress(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
    // Esperar a que el botón sea presionado (nivel bajo)
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
        // Bucle bloqueante mientras el botón no esté presionado
    }

    // Pequeño delay para evitar rebotes
    HAL_Delay(50);

    // Esperar a que el botón sea liberado (nivel alto)
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
        // Bucle bloqueante mientras el botón esté presionado
    }

    // Otro delay opcional para manejo adicional de rebotes
    HAL_Delay(50);
}
void RequestSensorData(void) {

    // Enviar el comando al ESP32 a través de UART1
    HAL_UART_Transmit(&huart5, (uint8_t*)TX_buffer, 1, 100);

    // Esperar respuesta del ESP32 a través de UART1
    HAL_UART_Receive(&huart5, (uint8_t *)RX_buffer, sizeof(RX_buffer), HAL_MAX_DELAY);
    /*HAL_UART_Receive(&huart5, (uint8_t *)buffer[1], 1, HAL_MAX_DELAY);
    HAL_UART_Receive(&huart5, (uint8_t *)buffer[2], 1, HAL_MAX_DELAY);
    HAL_UART_Receive(&huart5, (uint8_t *)buffer[3], 1, HAL_MAX_DELAY);*/

    // Desplegar el valor de temperatura recibido en la UART2 (conectada a la computadora)
    char response_msg[4];
    snprintf(response_msg, sizeof(response_msg), RX_buffer);
    HAL_UART_Transmit(&huart2, (uint8_t*)response_msg, strlen(response_msg), HAL_MAX_DELAY);
}

void guardar_sd(void){
//Montar SD
fres = f_mount(&fs, "/", 0);
if (fres == FR_OK) {
//transmit_uart("Montar. OK\n");
// HAL_UART_Transmit(&huart2, "Montar. OK\n", 13, 100);
} else if (fres != FR_OK) {
//transmit_uart("Montar. Fail\n");
// HAL_UART_Transmit(&huart2, "Montar. Fail\n", 15, 100);
}

// Abrir archivo
fres = f_open(&fil, "Proyecto3.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);

if (fres == FR_OK){
//transmit_uart("Abrir. OK\n");
// HAL_UART_Transmit(&huart2, "Abrir. OK\n", 12, 100);
} else if (fres != FR_OK) {
//transmit_uart("Abrir. Fail\n");
//HAL_UART_Transmit(&huart2, "Abrir. Fail\n", 14, 100);
}


//Escribir algún contenido en el archivo
// for (uint8_t i = 0; i<3; i++){
tiempoActual = HAL_GetTick();
sprintf(br1, "Valor medido: %s. Guardado en: %lu ms\n\r\n", temp_fr,tiempoActual);
f_puts(br1, &fil);
//}


//Cerrar archivo
fres = f_close(&fil);

if (fres == FR_OK){
//transmit_uart("Cerrar. OK\n");
//HAL_UART_Transmit(&huart2, "Cerrar. OK\n", 13, 100);
} else if (fres != FR_OK) {
//transmit_uart("Cerrar. Fail\n");
//HAL_UART_Transmit(&huart2, "Cerrar. Fail\n", 15, 100);
}

//Desmontar SD
fres = f_mount(NULL, "",1);

if (fres == FR_OK){
//transmit_uart("Desmontar. OK\n");
// HAL_UART_Transmit(&huart2, "Desm OK\n", 10, 100);
} else if (fres != FR_OK) {
//transmit_uart("Desmontar. Fail\n");
// HAL_UART_Transmit(&huart2, "Desm Fail\n", 12, 100);
}
}

void floatToString(float value, char *buffer, int precision) {
    int intPart = (int)value;
    float fracPart = value - intPart;

    // Convierte la parte entera
    int pos = 0;
    if (intPart < 0) {
        buffer[pos++] = '-';
        intPart = -intPart;
    }

    // Convierte la parte entera a cadena
    int intTemp = intPart;
    char intBuffer[10]; // Buffer temporal para la parte entera
    int intPos = 0;

    // Manejar el caso de 0
    if (intTemp == 0) {
        intBuffer[intPos++] = '0';
    } else {
        do {
            intBuffer[intPos++] = (intTemp % 10) + '0';
            intTemp /= 10;
        } while (intTemp > 0);
    }

    // Añadir la parte entera al buffer
    while (intPos > 0) {
        buffer[pos++] = intBuffer[--intPos];
    }

    // Añadir la parte fraccionaria
    if (precision > 0) {
        buffer[pos++] = '.';
        for (int i = 0; i < precision; i++) {
            fracPart *= 10;
            int fracInt = (int)fracPart;
            buffer[pos++] = fracInt + '0';
            fracPart -= fracInt;

            // Redondear si es necesario
            if (i == precision - 1 && fracPart >= 0.5) {
                buffer[pos - 1] += 1; // Sumar 1 a la última cifra
            }
        }
    }

    buffer[pos] = '\0'; // Terminar la cadena
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
