/* USER CODE BEGIN Header */


/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
SPI_HandleTypeDef hspi1;
FATFS fs;
FATFS *pfs;
FIL fil;
FRESULT fres;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;
char buffer[100];
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
const char *Menu = "Para realizar una lectura de temperatura presione el boton 1 \n \r";
const char *Temp_txt = "La temperatura es...";
const char *SD_inst = "Para guardar el dato en la SD presione el botón 2";
const char *C = "C";


char *ESP32_read_cmnd = 1;                             //La instrcción para el ESP para leer el sensor
char temprx_buffer[10] = {0};                          // Buffer para recibir el valor de temperatura

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
extern uint8_t fondo[];
extern uint8_t nieve[];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_UART5_Init(void);
static void MX_USART2_UART_Init(void);

void WaitForButtonPress(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
void RequestSensorData(void);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_UART5_Init();
  MX_USART2_UART_Init();
  MX_FATFS_Init();

  LCD_Init();

  LCD_Clear(0x00);
  FillRect(0, 0, 319, 239, 0xFFFF);
  FillRect(50, 60, 20, 20, 0xF800);
  FillRect(70, 60, 20, 20, 0x07E0);
  FillRect(90, 60, 20, 20, 0x001F);

  	//LCD_Bitmap(0, 0, 320, 240, fondo);
  	 FillRect(0, 0, 319, 206, 0x1911);

  	  LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);
  	  HAL_Delay(1500);
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 /*               Segmento de instrucciones para indicar al ESP32 leer el sensor y enviar el dato de vuelta                      */

	  /* Mostrar el menú */
	  

	  

	      HAL_UART_Transmit(&huart2, (uint8_t*)Menu, strlen(Menu), HAL_MAX_DELAY);         // Para la computadora
	      HAL_Delay(500);

	      // Esperar a que se presione el botón
	      WaitForButtonPress(GPIOC, GPIO_PIN_13);  // Suponiendo que el botón está conectado a GPIOC Pin 13

	      // Solicitar los datos de temperatura
	      RequestSensorData();
	      
int x = 1;
	      if (x == 1){  //temprx_buffer < 20
			  const char *cold_txt = "Que perro frío no?  \n \r";
			  HAL_UART_Transmit(&huart2, (uint8_t*)cold_txt, strlen(cold_txt), HAL_MAX_DELAY);
			  LCD_Bitmap(1, 1, 120, 120, nieve);
			  HAL_Delay(5000);
	    	  //Desplegar imagen de copo de nieve - temperatura menor a 20 es frio
			  //LCD_CMD(), LCD_DATA(),
	    	  //Luego indicar en la compu las instrucciones para guardar en la SD el dato recibido
	      }
int y = 1;
	      if (y == 1){  //temprx_buffer >= 20 && temprx_buffer <35
	    	  const char *mid_txt = "Ta rico el clima \n \r";
			  HAL_UART_Transmit(&huart2, (uint8_t*)mid_txt, strlen(mid_txt), HAL_MAX_DELAY);
			  LCS_Bitmap(1, 1, 120, 129);
			  HAL_Delay(5000);
			  
			  //Desplegar imagen de playa - Entre 20 y 35 es una buena temperatura
		      //Luego indicar en la compu las instrucciones para guardar en la SD el dato recibido
	      }
int z = 1;
	      if (z == 1) { //era un else
	    	  const char *hot_txt = "Casi tan caliente como el que escribió el código \n \r";
			  HAL_UART_Transmit(&huart2, (uint8_t*)hot_txt, strlen(hot_txt), HAL_MAX_DELAY);
			  LCD_Clear(0x00);
			  LCD_Bitmap(1, 1, 120, 120, fuego);
			  HAL_Delay(5000);
			  //Desplegar imagen de fuego - Más arriba de 35 es muy caliente
		      //Luego indicar en la compu las instrucciones para guardar en la SD el dato recibido
	      }
      //Solicita datos al ESP a través del UART

	  //HAL_UART_Transmit(&huart1, (uint8_t*)ESP32_read_cmnd, strlen(ESP32_read_cmnd), HAL_MAX_DELAY);

	 /*               Segmento de instrucciones para recibir el dato del ESP32 y mostrar feedback visual respecto al mismo           */
	  //HAL_UART_Receive(&huart1, (uint8_t*)ESP32_temp_val, strlen(ESP32_temp_val), HAL_MAX_DELAY);

	  /*              Segmento de instrucciones parar mostrar el dato recibido en el monitor serial                                  */
	  //HAL_UART_Transmit(&huart2, (uint8_t*)Temp_txt, strlen(Temp_txt), HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)ESP32_temp_val, strlen(ESP32_temp_val), HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)C, strlen(C), HAL_MAX_DELAY);

	  /*
	  //Dependiendo del valor de ESP32_temp_val se dará un feedback diferente dependiendo del valor del mismo.	   */
	  /*if (ESP32_temp_val < 30){                   //EN CASO DE QUE ESTÉ MUY FRÍO
		  const char *cold_txt = "Que perro frío no?  \n \r";
		  //Mostrar el copito de nieve
		  HAL_UART_Transmit(&huart2, (uint8_t*)cold_txt, strlen(cold_txt), HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, (uint8_t*)SD_inst, strlen(SD_inst), HAL_MAX_DELAY);*/
	  }
    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 80;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void WaitForButtonPress(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
        // Bucle bloqueante hasta que se detecte el botón presionado (nivel bajo)
    }
}

void RequestSensorData(void) {

    // Enviar el comando al ESP32 a través de UART1
    HAL_UART_Transmit(&huart1, (uint8_t*)ESP32_read_cmnd, sizeof(ESP32_read_cmnd), HAL_MAX_DELAY);

    // Esperar respuesta del ESP32 a través de UART1
    HAL_UART_Receive(&huart1, (uint8_t *)buffer, sizeof(buffer), HAL_MAX_DELAY);

    // Desplegar el valor de temperatura recibido en la UART2 (conectada a la computadora)
    char response_msg[50];
    snprintf(response_msg, sizeof(response_msg), "Temperatura recibida: %s°C\n", temprx_buffer);
    HAL_UART_Transmit(&huart2, (uint8_t *)response_msg, strlen(response_msg), HAL_MAX_DELAY);
}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
